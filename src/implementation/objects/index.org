#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization
  
** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from op_exceptions import ConstraintError
from op_exceptions import NotAuthorizedError
from utils import *

#system = None
#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired
from src.op_exceptions import ConstraintError
from src.op_exceptions import NotAuthorizedError
#+END_SRC


** Imports for utility functions

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

import re


#+END_SRC


** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model

** Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

*** ConstraintError

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class ConstraintError(Exception):
    str = None
    
    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
#+END_SRC


*** NotAuthorizedError
    
#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class NotAuthorizedError(Exception):
    str = None
    
    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
#+END_SRC

** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value):
            self.value = value
        else:
            raise TypeError("This is not a valid email id")

    def __str__(self):
        return self.value

        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("abc123@example.com")
        #correct email
        self.assertEqual(new_email.value, "abc123@example.com")
        #incorrect name
        self.assertRaises(TypeError, Email, "ab@sff@.@com")
#+END_SRC

** User

*** Mutable Data

    These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User():
    email = None
    role = None
    name = None
    session = None
#+END_SRC


*** Constructor
    
**** Implementation
     
    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if not 'name' in kwargs:
            raise AttributeRequired("Name is missing")

        if not 'email' in kwargs:
            raise AttributeRequired("Email is missing")
       
        if not 'role' in kwargs:
            raise AttributeRequired("Role is missing")

        self.set_email(kwargs['email'])
        self.set_name(kwargs['name'])
        self.set_role(kwargs['role'])
        
        
#+END_SRC


**** Test the constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True

    def setUp(self):
        setUp()

    def tearDown(self):
        tearDown()

    def test_user_creation_without_role(self):
        print "test_user_creation_without_role"
        with self.assertRaises(AttributeRequired):
            user = User(name = "robin Smith", 
            email = "smith@gmail.com")

    def test_user_creation_with_role(self):
        print "test_user_creation_with_role"
        user = User(name = "Robin Smith", email="smith@gmail.com",
        role=Role.admin)
        self.assertEqual(user.role, Role.admin)
        self.assertEqual(user.email, "smith@gmail.com")

 #+END_SRC

 
*** Functions     
**** setEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        if is_email(email):
            self.email = email

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_email_of_user(self):
        print"test_set_email_of_user"
        user = User(name="abc", email = "abc@gmail.com",
        role=Role.admin)
        user.set_email("abc@gmail.com")
        self.assertEqual(user.email, "abc@gmail.com")
#+END_SRC

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if is_alphabetic_string(name):
            self.name = name
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_name_of_user(self):
        print"test_set_name_of_user"
        user = User(name="abc", email = "abc@gmail.com",
        role=Role.admin)
        user.set_name("abc")
        self.assertEqual(user.name, "abc")
#+END_SRC


**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        if isinstance(role, Role):
            self.role = role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_role_of_user(self):
        print"test_set_role_of_user"
        user = User(name = "abc", email = "abc@gmail.com",
        role=Role.admin)
        user.set_role(Role.admin)
        self.assertEqual(user.role, Role.admin)
#+END_SRC

**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_role_of_user(self):
        print"test_get_role_of_user"
        user = User(name="abc", email = "abc@gmail.com",
        role=Role.admin)
        new_role = user.get_role()
        self.assertEqual(new_role, user.role)
#+END_SRC


**** getEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_email_of_user(self):
        print"test_get_email_of_user"
        user = User(name="abc", email = "abc@gmail.com",
        role=Role.admin)
        new_email = user.get_email()
        self.assertEqual(new_email, user.email)
#+END_SRC

**** getName
***** Implementation

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_name_of_user(self):
        print"test_get_name_of_user"
        user = User(name="abc", email = "abc@gmail.com",
        role=Role.admin)
        new_name = user.get_name()
        self.assertEqual(new_name, user.name)
#+END_SRC


**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        pass
        return {
            'name': self.name,
            'email': self.email,
            'role': self.role.to_client()
        }
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role():
    name = None
    admin = None
    user = None

#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, name):
        self.name = name
    
    def __str__(self):
        return self.name

#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role_creation"
        user = User(name = "Robin Smith", email= "smith@gmail.com",
        role=Role.admin)
        self.assertEquals(user.role, Role.admin)
#+END_SRC


*** Functions
**** to_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return {
        'role' : self.name
        }

Role.admin = Role("admin")
Role.user = Role("user")
#+END_SRC


** Session
   
*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Session(object):
    user = None
    
#+End_SRC

*** Constructor
**** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if 'user' not in kwargs:
            raise AttributeRequired("user is mandatory")
        else:
            self._set_user(kwargs['user'])
#+END_SRC

*** Test constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestSession(TestCase):
    TESTING = True

    def setUp(self):
        setUp()

    def tearDown(self):
        tearDown()

    def test_session_creation(self):
        print "test_session_creation"
        user = User(name="Robin Smith", 
                    email="smith@gmail.com",
                    role=Role.user)
        session = Session(user=user)
        self.assertEqual(session.user.role, Role.user)

#+END_SRC

*** Operations

**** getUser
     
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_user(self):
        return self.user
#+END_SRC

***** Test case 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_user(self):
        print "test_get_user"
        user = User(name = "def", email = "def@gmail.com", role = Role.user)
        session = Session(user = user)
        new_user = session.get_user()
        self.assertEquals(new_user, user)
#+END_SRC
    
**** _set_user

***** Implementation 

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def _set_user(self, user):
        if not isinstance(user, User):
            raise TypeError('`user` argument should be of type User.')
        else:
            self.user = user
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_user(self):
        print "test_set_user"
        user = User(name = "def", email = "def@gmail.com", role = Role.user)
        session = Session(user = user)
        session._set_user(user)
        self.assertEquals(session.user, user)
#+END_SRC
    
**** toClient
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return {
            'session': self.user.to_client()
        }
#+END_SRC


** System

*** Definition

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
from sets import Set
class System():
    user_set  = []
    session_set = []
    created = False

    def __init__(self):
        if System.created == True:
            raise ConstraintError("System has already been created")
        else:
            admin_user = User(name="admin", 
                          email="app-admin@vlabs.ac.in", 
                          role=Role.admin)
            s = Session(user = admin_user)
            System.created = True
            self.add_user(admin_user,s)
            self.session_set.append(s)
#+END_SRC


*** Constructor test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestSystem(TestCase):
    TESTING = True

    def setUp(self):
        setUp()

    def tearDown(self):
        tearDown()

    def test_system_creation(self):
        print "test_system_creation"
        global system
        #system = System()
        admin_user = User(name="admin", 
                          email="app-admin@vlabs.ac.in", 
                          role=Role.admin)
        #system.user_set.add(admin_user)
        new_user = system.user_set.pop()
        self.assertEquals(new_user.email, admin_user.email)
        
        
#+END_SRC


*** Operations

**** add_user
     
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def add_user(self, user,session):
        if session.user.role == Role.admin:
            self.user_set.append(user)
        else:
            raise NotAuthorizedError("Only admin can add")

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no

    def test_add_user_session_admin(self):
        #global system
        print "test_add_user_session_admin"
        old_user_set = system.user_set
        user = User(name = "abcdef", email = "abcdef@gmail.com", role = Role.user)
        admin_session_list = filter(lambda x: x.user.role == Role.admin, system.session_set)
        admin_session = admin_session_list[0]
        global system
        system.add_user(user, admin_session)
        new_user_set = system.user_set
        self.assertEquals( len(new_user_set), len(old_user_set))
#+END_SRC

**** del_user

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def del_user(self, user, session):
        if not session.user.role == Role.admin:
            raise NotAuthorizedError("Only admin can remove users")
        else:
            check = filter (lambda x: x.email == user.email, self.session_set)
            if not check:
                new_users = filter(lambda x: x.email ==  user.email, self.user_set)
            else:
                raise ConstraintError("User is still logged in")
#+END_SRC

**** show_users
     
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def show_users(self):
        return self.user_set
#+END_SRC

**** get_user_by_email
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_user_by_email(email):
        user_check = filter(lambda x: x.email == email, self.user_set)
        if user_check:
            return user_check
        else:
            print("No user by this email")
#+END_SRC

**** make_user

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
     
    def make_user(self,name,email,role,session):
        if(session.user.role==Role.admin):
            user=User(name=name,email=email,role=role)
            self.add_user(user,session)  
        else:
            raise NotAuthorizedError('only admin can create user')
#+END_SRC

***** Test

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no      
    def test_make_user_session_user(self):
        global system
        print "test_make_user_session_user"
        old_users=system.user_set
        user = User(name = "abcd", email = "abcd@gmail.com", role = Role.user)
        #admin_session_list = filter(lambda x: not x.user.role == Role.admin, system.session_set)
        #admin_session = admin_session_list.pop()
        session = Session(user = user)
        with self.assertRaises(NotAuthorizedError):
            system.make_user("abc", "abcd@gmail.com", Role.user, session)

    def test_make_user_session_admin(self):
        global system
        print "test_make_user_session_admin"
        old_users=system.user_set
        user = User(name = "abcd", email = "abcd@gmail.com", role = Role.user)
        #admin_session_list = filter(lambda x: not x.user.role == Role.admin, system.session_set)
        #admin_session = admin_session_list.pop()
        session = Session(user = user)
        with self.assertRaises(NotAuthorizedError):
            system.make_user("abc", "abcd@gmail.com", Role.user, session)

#+END_SRC
**** get_email_of_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email_of_user(user):
        return user.get_email()
#+END_SRC


**** get_name_of_user
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name_of_user(user):
        return user.get_name()
#+END_SRC



**** get_role_of_user
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role_of_user(user):
        return user.get_role()
#+END_SRC

**** login
**** del_session

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def del_session(user, session):
        if not session.user.role == Role.admin:
            raise NotAuthorizedError(" Only admin can delete sessions")
        else:
            new_sessions = filter(lambda x: x.user.email == user.email,
            self.session_set)
            self.session_set = new_sessions
#+END_SRC

**** show_sessions

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def show_sessions(session):
        if not session.user.role == Role.admin:
            raise NotAuthorizedError("Only admin can view sessions")
        else:
            return self.session_set

system = System()
#+END_SRC


* Run Test Cases
** Initialization 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC

** Setup

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no


def setUp():
    global system
    if not system.user_set:
        user = User(name = "admin",email = "app-admin@vlabs.ac.in",
        role=Role.admin)
        s = Session(user=user)
        system.add_user(user,s)
        system.session_set.append(s)
    
#+END_SRC

** Teardown

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
def tearDown():
    global system
    system.user_set = []
    system.session_set = []
#+END_SRC


