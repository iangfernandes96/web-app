#+title:  Object  Implementation of Mini Version of User Directory Application
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../../../org-templates/level-0.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


* Initialization
  
** Imports for Python API
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
# -*- coding: utf-8 -*-
from op_exceptions import AttributeRequired
from op_exceptions import ConstraintError
from op_exceptions import NotAuthorizedError
from utils import *

#+END_SRC


** Imports and Initialization of testcases for Python API

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
# -*- coding: utf-8 -*-
import unittest
from unittest import TestCase
from datetime import datetime

from src.obj import *
from src.op_exceptions import AttributeRequired
from src.op_exceptions import ConstraintError
from src.op_exceptions import NotAuthorizedError
#+END_SRC


** Imports for utility functions

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no

# module to hold all utilities/helper functions

import json

import re


#+END_SRC


** Init Files
#+BEGIN_SRC python :tangle ../../src/__init__.py :eval no
import obj
#+END_SRC

#+BEGIN_SRC python :tangle ../../tests/__init__.py :eval no
print "tests package"
#+END_SRC



* Object Model

** Custom Exceptions
   These are some of the custom exceptions used in the application.

*** AttributeRequired

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class AttributeRequired(Exception):
    str = None

    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)

#+END_SRC

*** ConstraintError

#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class ConstraintError(Exception):
    str = None
    
    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
#+END_SRC


*** NotAuthorizedError
    
#+BEGIN_SRC python :tangle ../../src/op_exceptions.py :eval no
class NotAuthorizedError(Exception):
    str = None
    
    def __init__(self, str):
        self.str = str

    def __str__(self):
        return repr(self.str)
#+END_SRC

** Utility Functions

*** is_alphabetic_string(value)
    This function take an argument and checks whether the argument contains
    only alphabets.

#+BEGIN_SRC  python :tangle ../../src/utils.py :eval no
def is_alphabetic_string(value):
    if re.search('[^a-zA-Z. ]+', value):
        return False
    else:
        return True
#+END_SRC


*** is_email(value)
    Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
    Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/utils.py :eval no
def is_email(value):
    if re.search('[^@]+@[^@]+\.[^@]+', value):
        return True
    else:
        return False
#+END_SRC



** Name

*** Construction

     Name is an alphabetical string.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Name(object):
    value = None
    def __init__(self, value):
        # value: String 
        # if the string contains any non-alphabet and non-space character,
        # raise a type error
        if is_alphabetic_string(value):
            self.value = value
        else:
            raise TypeError('%s is not a Name!' % value)

    def __str__(self):
        return self.value
#+END_SRC


*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestName(TestCase):
    TESTING = True
    def test_name_type(self):
        print "test_name_type"
        new_name = Name("John")
        # correct name
        self.assertEqual(new_name.value, "John")
        # incorrect name
        self.assertRaises(TypeError, Name, "123dasd")
#+END_SRC


** Email

*** Construction

     Email is a type as defined in RFC [[https://tools.ietf.org/html/rfc5321][5321]], [[https://tools.ietf.org/html/rfc5322][5322]] and [[https://tools.ietf.org/html/rfc6531][6531]].
     Following is the constructor for this class.

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Email(object):
    value = None
    def __init__(self, value):
        if is_email(value):
            self.value = value
        else:
            raise TypeError("This is not a valid email id")

    def __str__(self):
        return self.value

        
#+END_SRC

*** Test the Construction
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestEmail(TestCase):
    TESTING = True
    def test_email_type(self):
        print "test_email_type"
        new_email = Email("abc123@example.com")
        #correct email
        self.assertEqual(new_email.value, "abc123@example.com")
        #incorrect name
        self.assertRaises(TypeError, Email, "ab@sff@.@com")
#+END_SRC

** User

*** Mutable Data

    These are the data associated with User type, which are mutable

     + Name
     + Email
     + Role


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class User():
    users = []     # this is a static variable, accessed by User.users
    email = None
    role = None
    name = None
    session = None
#+END_SRC


*** Constructor
    
**** Implementation

    Signature of the constructor of =User= is as follows:

    #+BEGIN_EXAMPLE
    usr = User(name=<object of Name>, email=<object of Email>, 
              role=[<object of Role>, <object of Role> ...])
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if not 'name' in kwargs:
            raise AttributeRequired("Name is missing")

        if not 'email' in kwargs:
            raise AttributeRequired("Email is missing")
       
        if not 'role' in kwargs:
            raise AttributeRequired("Role is missing")

        self.set_email(kwargs['email'])
        self.set_name(kwargs['name'])
        self.set_role(kwargs['role'])
        
        #session = Session(self)

        #add(user,session)

#+END_SRC


**** Test the constructor
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestUser(TestCase):
    TESTING = True

    def setUp(self):
        setUp()

    def tearDown(self):
        tearDown()

    def test_user_creation_without_role(self):
        print "test_user_creation_without_role"
        with self.assertRaises(AttributeRequired):
            user = User(name = Name("robin Smith"), 
            email = Email("smith@gmail.com"))

    def test_user_creation_with_role(self):
        print "test_user_creation_with_role"
        user = User(name = Name("Robin Smith"), email=Email("smith@gmail.com"),
        role=Role(name=Name("admin")))
        self.assertEqual(user.role.name, "admin")
        self.assertEqual(user.email, "smith@gmail.com")

 #+END_SRC


*** Functions

**** addUser 
***** Implementation

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def add(user,session):
        if session.user.role.name is not 'admin':
            raise NotAuthorizedError("Only a user with admin can add")
        else:
            existing_users=filter(lambda x: x.email == user.email, User.users)
            if not existing_users:
                User.users.append(user)
            else:
                raise ConstraintError("User already exists in the system")
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_user_duplicate_add(self):
        print"test_user_duplicate_add"
        user=User(name = Name("abc"),email = Email("abc@gmail.com"), role =
        Role(name=Name("admin")))
        with self.assertRaises(ConstraintError):
            User.add(user,Session(user=user))
#+END_SRC
**** setEmail
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_email(self, email):
        if isinstance(email, Email):
            self.email = email.value
        else:
            raise TypeError("Email is invalid")

#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_email_of_user(self):
        print"test_set_email_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user.set_email(Email("abc@gmail.com"))
        self.assertEqual(user.email, "abc@gmail.com")
#+END_SRC

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if isinstance(name, Name):
            self.name = name.value
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_name_of_user(self):
        print"test_set_name_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user.set_name(Name("abc"))
        self.assertEqual(user.name, "abc")
#+END_SRC


**** setRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_role(self, role):
        if isinstance(role, Role):
            self.role = role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_set_role_of_user(self):
        print"test_set_role_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user.set_role("admin")
        self.assertEqual(user.role.name, "admin")
#+END_SRC

**** getRole
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_role(self):
        return self.role
#+END_SRC
***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_role_of_user(self):
        print"test_get_role_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        new_role = user.get_role()
        self.assertEqual(new_role.name, user.role.name)
#+END_SRC


**** getEmail
 #+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_email(self):
        return self.email
 #+END_SRC

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_email_of_user(self):
        print"test_get_email_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        new_email = user.get_email()
        self.assertEqual(new_email, user.email)
#+END_SRC

**** getName
***** Implementation

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test

#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_name_of_user(self):
        print"test_get_name_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        new_name = user.get_name()
        self.assertEqual(new_name, user.name)
#+END_SRC

**** getAll: Nil --> set[User]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
        return User.users
#+END_SRC


***** Test getAll
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_all(self):
        print"test_get_all"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user1 = User(name=Name("def"), email = Email("def@gmail.com"),
        role=Role(name=Name("user")))
        new_user = user.get_all()
        self.assertEqual(User.users, new_user)
#+END_SRC



**** toClient
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        pass
        return {
            'name': self.name,
            'email': self.email,
            'role': self.role.to_client()
        }
#+END_SRC



** Role

*** Introduction
   A Role has got certain privileges.  In this current application, the
   privileges are understood 
   
   Different types of roles are:
   - Admin :: An admin is an user who can add, modify and delete other users
        except himself.
   - User :: A User is a user who can view all other users and can modify himself.


*** Mutable Data

     These are the data associated with Role type, which are mutable

     + Name


*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Role():
    name = None
    roles = [] # a static variable, to hold the roles
#+END_SRC


*** Constructor

    The signature of Role is defined as follows
    #+BEGIN_EXAMPLE
    role = Role(name=<Object of Name>)
    #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, **kwargs):
        if not 'name' in kwargs:
            raise AttributeRequired("Role is missing")
        self.set_name(kwargs['name'])
        
        Role.roles.append(kwargs['name'])
        
#+END_SRC

*** Test Constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestRole(TestCase):
    TESTING = True
    def test_role_creation(self):
        print "test_role_creation"
        user = User(name = Name("Robin Smith"), email=Email("smith@gmail.com"),
        role=Role(name=Name("admin")))
        self.assertEqual(user.role.name, "admin")
#+END_SRC


*** Functions

**** setName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def set_name(self, name):
        if(name.value == "admin" or name.value =="user"):
            self.name = name.value
        else:
            raise AttributeException("Incorrect role")
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_role_set_name(self):
        print"test_role_set_name"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user.set_role("admin")
        self.assertEqual(user.role.name, "admin")
#+END_SRC



**** getName
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def get_name(self):
        return self.name
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_name_of_user(self):
        print"test_get_name_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        new_role = user.get_role()
        self.assertEqual(new_role, user.role)
#+END_SRC

**** getAll: Nil --> set[Role]

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all():
        return Role.roles
        pass
#+END_SRC


***** Test getAll: Nil --> set[Role]
 #+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_all(self):
        print"test_set_name_of_user"
        user = User(name=Name("abc"), email = Email("abc@gmail.com"),
        role=Role(name=Name("admin")))
        user1 = User(name=Name("def"), email = Email("def@gmail.com"),
        role=Role(name=Name("user")))
        new_roles = user1.role.get_all()
        self.assertEqual(new_roles, Role.roles)
#+END_SRC



**** to_client
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        print "fill"
#+END_SRC


** Session

*** Definition
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
class Session(object):
    user = None
    sessions = []
#+End_SRC

*** Constructor
**** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def __init__(self, user):
        self.user = user
        Session.sessions.append(self)
#+END_SRC

*** Test constructor
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
class TestSession(TestCase):
    
    TESTING = True
        
    def setUp(self):
        setUp()

    def tearDown(self):
        setUp()

    def test_session_creation(self):
        print "test_session_creation"
        user = User(name = Name("ghi"), email = Email("ghi@gmail.com"),
        role = Role(name = Name("admin")))
        new_sessions = Session.get_all_sessions()
        User.add(user,Session(user = user))
        new_sessions1 = Session.get_all_sessions()
        self.assertEqual( len(new_sessions), len(new_sessions1)  )

#+END_SRC

*** Operations

**** getAllSessions

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_all_sessions():
        return Session.sessions
#+END_SRC

**** deleteSession
***** Implementation 

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def delete_session(user):
        sessions = filter(lambda session:user.email != session.user.email,
        Session.sessions)
        Session.sessions = sessions
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_delete_session(self):
        print"test_delete_session"
        user = User(name=Name("def"), email = Email("abc1@gmail.com"),
        role=Role(name=Name("admin")))
        User.add(user,Session(user = user))
        new_sessions = Session.get_all_sessions()
        Session.delete_session(user)
        self.assertEqual( len(Session.sessions)+1, len(new_sessions))

#+END_SRC

**** getUserEmail

***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    @staticmethod
    def get_user(user):
        return user.email
#+END_SRC

***** Test
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
    def test_get_email_of_user(self):
        print "test_get_email_of_user"
        user = User(name=Name("def"), email = Email("def@gmail.com"),
        role=Role(name=Name("admin")))
        User.add(user,Session(user = user))
        new_email = Session.get_user(user)
        self.assertEqual(new_email, "def@gmail.com")

#+END_SRC

**** toClient
***** Implementation
#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
    def to_client(self):
        return {
            'session': self.user.to_client()
            }
#+END_SRC


* Run Test Cases
** Initialization 
#+BEGIN_SRC python :tangle ../../tests/test_obj.py :eval no
if __name__ == '__main__':
    unittest.main()
#+END_SRC

** Setup

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no

def setUp():
    user = User(name = Name("abc"), email=Email("abc@gmail.com"),
    role=Role(name=Name("admin")))
    User.users.append(user)

#+END_SRC

** Teardown

#+BEGIN_SRC python :tangle ../../src/obj.py :eval no
def tearDown():
    User.users = []
    Session.sessions = []

#+END_SRC


