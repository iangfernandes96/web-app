#+TITLE: The Application Server
#+AUTHOR: VLEAD
#+DATE: [2016-05-11 Wed]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


This document illustrates building of the REST API.
* REST

** Initialization
#+BEGIN_SRC python :tangle ../../src/api.py :eval no

# -*- coding: utf-8 -*-

import os
import csv
import requests
from datetime import datetime
import inspect
from flask import session, render_template, Blueprint, request, jsonify, abort,\
    current_app, redirect, url_for
from config import *
from flask import current_app

from flask import Flask, redirect, url_for
from werkzeug import secure_filename

from db import *
from utils_new import parse_request, jsonify_list
api = Blueprint('APIs', __name__)
#+END_SRC


** GET all users

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users', methods=['GET'])
def get_users():
    return jsonify_list([i.to_client() for i in User.get_all()])
#+END_SRC
   

** GET all roles
   The is the REST API to get all the roles.

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles', methods=['GET'])
def get_roles():
    return jsonify_list([i.to_client() for i in Role.get_all()])
#+END_SRC


** GET a user with id

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['GET'])
def get_user_by_id(id):
    record = User.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("user", id))

    return jsonify(record.to_client())
#+END_SRC


** GET a role with id

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['GET'])
def get_role_by_id(id):
    record = Role.get_by_id(id)
    if not record:
        abort(404, "No entry for %s with id: %s found." % ("role", id))

    return jsonify(record.to_client())
#+END_SRC


** Create a user
   Usage:
   #+BEGIN_EXAMPLE
   POST request
   {
   "name": "Jimi hendrix",
   "email": "jimi@gmail.com",
   "role": [1,2]
   }

    OR
   
    {
    "name": "Jimi hendrix",
    "email": "jimi@gmail.com",
    }
   #+END_EXAMPLE

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users', methods=['POST'])
def create_user():
    if not request.json or not 'name' in request.json or not 'email' in request.json:
        abort(400)
    else:
        name = request.json['name']
        email = request.json['email']
        role_ids = []
        roles = []
        if 'role' in request.json:
            role_ids = request.json['role']
        try:
            for role_id in role_ids:
                roles.append(Role.get_by_id(role_id))
            user = User(name=name,
                        email=email,
                        role=roles[0])
            user.save()
            return jsonify(user.to_client())
        except Exception, e:
            current_app.logger.error("Error occured while inserting"
                                     "user record: %s" % str(e))
            abort(500, str(e))
                
                
#+END_SRC

** Create a role

#+BEGIN_SRC python :tangle ../../src/api.py :eval no

@api.route('/roles', methods=['POST'])
def create_role():
    if not request.json or not 'name' in request.json:
        abort(400)
    else:
        name = request.json['name']
        try:
            role = Role(name)
            role.save()
            return jsonify(role.to_client())
        except Exception, e:
            current_app.logger.error("Error occured while inserting" 
                                     "role record: %s" % str(e))
            abort(500, str(e))

#+END_SRC

** Update a user

#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['PUT', 'DELETE'])
def update_delete_user(id):

    record = User.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (user, id))

    if request.method == 'DELETE':
        try:
            record.delete()
            return jsonify(id=id, status="success")
        except Exception, e:
            current_app.logger.error("Error occured while deleting"
                                     "user record %d: %s" % (id, str(e)))
            abort(500, str(e))

    if request.method == 'PUT':

        new_data = {}
        try:
            if 'name' in request.json:
                new_data['name'] = request.json['name']
            if 'email' in request.json:
                new_data['email'] = request.json['email']
            if 'roles' in request.json:
                role_ids = request.json['roles']
                roles = []
                for role_id in role_ids:
                    roles.append(Role.get_by_id(role_id))
                new_data['roles'] = roles

            record.update(**new_data)

            return jsonify(User.get_by_id(id).to_client())

        except Exception, e:
            current_app.logger.error("Error occured while updating"
                                     "user record %d: %s" % (id, str(e)))
            abort(500, str(e))
#+END_SRC

** Update a role
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['PUT', 'DELETE'])
def update_delete_role(id):

    record = Role.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (role, id))

    if request.method == 'DELETE':
        try:
            record.delete()
            return jsonify(id=id, status="success")
        except Exception, e:
            current_app.logger.error("Error occured while deleting "
                                     "role record %d: %s" % (id, str(e)))
            abort(500, str(e))

    if request.method == 'PUT':

        new_data = {}
        try:
            if 'name' in request.json:
                new_data['name'] = request.json['name']

            record.update(**new_data)

            return jsonify(Role.get_by_id(id).to_client())

        except Exception, e:
            current_app.logger.error("Error occured while updating "
                                     "role record %d: %s" % (id, str(e)))
            abort(500, str(e))
#+END_SRC
** Delete a user
**** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/users/<int:id>', methods=['DELETE'])
def delete_user(id):

    record = User.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (user, id))

    #if request.method == 'DELETE':
    try:
        record.delete()
        return jsonify(id=id, status="success")
    except Exception, e:
        current_app.logger.error("Error occured while deleting"
                                     "user record %d: %s" % (id, str(e)))
        abort(500, str(e))

#+END_SRC


** Delete a role
**** Implementation
#+BEGIN_SRC python :tangle ../../src/api.py :eval no
@api.route('/roles/<int:id>', methods=['DELETE'])
def delete_role(id):

    record = Role.get_by_id(id)

    if not record:
        abort(404, 'No %s with id %s' % (role, id))

    #if request.method == 'DELETE':
    try:
        record.delete()
        return jsonify(id=id, status="success")
    except Exception, e:
        current_app.logger.error("Error occured while deleting "
                                     "role record %d: %s" % (id, str(e)))
        abort(500, str(e))

#+END_SRC
